@page "/simpleselect"

<PageTitle>Simple Select</PageTitle>

<h3>SimpleSelect</h3>

<button class="btn btn-success" @onclick=GenerateTestData>Generate Test Data</button>

@if (_testData is not null)
{
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>TestEnum01</th>
        <th>TestEnum02</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var item in _testData)
      {
        <tr>
          <td>@item.Name</td>
          <td>
            <select @bind=item.TestEnum01 >
              @foreach (var value in Enum.GetValues(typeof(TestEnum01)))
              {
                <option value="@(value.ToString())">@(value.ToString())</option>
              }
            </select>
          </td>
          <td>
            <select @bind=item.TestEnum02>
              @foreach (var value in Enum.GetValues(typeof(TestEnum02)))
              {
                <option value="@(value.ToString())">@(value.ToString())</option>
              }
            </select>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

<hr />

<h3>List of in memory data</h3>
<button class="btn btn-success" @onclick=RefreshInMemoryList>In Memory Data</button>

@if (_inMemoryData is not null)
{
  <table class="table">
    <thead>
      <tr>
        <th>Name</th>
        <th>TestEnum01</th>
        <th>TestEnum02</th>
      </tr>

    </thead>
    <tbody>
      @foreach (var inMemoryData in _inMemoryData)
      {
        <tr>
          <td>@inMemoryData.Name</td>
          <td>@inMemoryData.TestEnum01</td>
          <td>@inMemoryData.TestEnum02</td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  List<TestClass>? _testData;
  List<TestClass>? _inMemoryData;

  void RefreshInMemoryList()
  {
    _inMemoryData = _testData?.ToList();
    StateHasChanged();
  }

  void GenerateTestData()
  {
    _testData = Enumerable.Range(0, 10)
                          .Select(i => new TestClass
                            {
                              Name = $"Test {i}",
                            }).ToList();
    StateHasChanged();
  }

  internal class TestClass
  {
    public string? Name { get; set; }
    public TestEnum01 TestEnum01 { get; set; }
    public TestEnum02 TestEnum02 { get; set; }
  }

  internal enum TestEnum01
  {
    Value1,
    Value2,
    Value3
  }

  internal enum TestEnum02
  {
    Test1,
    Test2,
    Test3
  }

}
